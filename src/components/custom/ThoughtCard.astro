---
import { render, type CollectionEntry } from 'astro:content'

import { Button, FormattedDate, Icon } from 'astro-pure/user'
import { cn } from 'astro-pure/utils'
import { withBase } from '@/utils/url'

type Props = {
  entry: CollectionEntry<'thoughts'>
  activeTag?: string | null
}

const { entry, activeTag = null } = Astro.props as Props
const normalizedActiveTag = activeTag?.toLowerCase() ?? null
const { Content } = await render(entry)
const tags = entry.data.tags ?? []
const basePath = withBase('thoughts')
const updated = entry.data.updatedDate
---

<article class='group relative flex flex-col gap-4 rounded-2xl border bg-background/80 p-5 transition-colors hover:border-primary/30 hover:bg-muted/60'>
  <header class='flex flex-wrap items-center gap-x-3 gap-y-2 text-xs uppercase tracking-wide text-muted-foreground'>
    <FormattedDate
      class='font-medium'
      date={new Date(entry.data.publishDate)}
      dateTimeOptions={{
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }}
    />
    {updated && (
      <span class='flex items-center gap-1 text-[11px] text-muted-foreground'>
        <Icon name='time' class='size-3.5' />
        Updated
        <FormattedDate
          class='font-medium'
          date={new Date(updated)}
          dateTimeOptions={{
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          }}
        />
      </span>
    )}
    {entry.data.language && (
      <span class='rounded-full border border-border px-2 py-0.5 text-[11px] uppercase tracking-widest'>
        {entry.data.language}
      </span>
    )}
  </header>

  {entry.data.title && <h2 class='text-lg font-semibold text-foreground'>{entry.data.title}</h2>}

  <div class='thought-content prose max-w-none text-sm leading-relaxed text-muted-foreground dark:prose-invert'>
    <Content />
  </div>

  {tags.length > 0 && (
    <footer class='flex flex-wrap gap-2 pt-1'>
      {tags.map((tag) => {
        const isActive = normalizedActiveTag === tag
        return (
          <Button
            title={`#${tag}`}
            href={`${basePath}?tag=${encodeURIComponent(tag)}`}
            variant='pill'
            class={cn(
              'transition-colors duration-200',
              isActive && 'bg-primary text-primary-foreground hover:bg-primary/90'
            )}
            data-state={isActive ? 'active' : undefined}
            aria-pressed={isActive}
          >
            #{tag}
          </Button>
        )
      })}
    </footer>
  )}
</article>

<style>
  .thought-content :global(p) {
    margin: 0;
  }
  .thought-content :global(p + p) {
    margin-top: 0.75rem;
  }
</style>
